;
; SDIO PIO programs for RP2350
; Supports 4-bit SDIO protocol for high-speed SD card access
;

; ====================================================================
; SDIO Clock Generation Program
; ====================================================================
.program sdio_clk
.side_set 1

public start:
    pull block          side 0  ; Get number of clock cycles
    mov x, osr          side 0

clock_loop:
    jmp x-- clock_loop  side 1 [1]
    nop                 side 0 [1]

% c-sdk {
    static inline void sdio_clk_program_init(PIO pio, uint sm, uint offset, uint clk_pin, float freq) {
        pio_sm_config c = sdio_clk_program_get_default_config(offset);
        
        // Configure clock pin
        pio_gpio_init(pio, clk_pin);
        pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
        sm_config_set_sideset_pins(&c, clk_pin);
        
        // Set frequency
        float div = (float)clock_get_hz(clk_sys) / freq;
        sm_config_set_clkdiv(&c, div);
        
        // Initialize
        pio_sm_init(pio, sm, offset, &c);
    }
%}

; ====================================================================
; SDIO Command Line Program  
; ====================================================================
.program sdio_cmd
.side_set 1 opt

public send_cmd:
    set y, 31           ; First 32 bits
    pull block          ; Get first word of command data
    
cmd_bit_loop1:
    out pins, 1 side 1  ; Output bit on rising edge
    jmp y-- cmd_bit_loop1 side 0 [1]
    
    set y, 15           ; Remaining 16 bits  
    pull block          ; Get second word of command data
    
cmd_bit_loop2:
    out pins, 1 side 1  ; Output bit on rising edge
    jmp y-- cmd_bit_loop2 side 0 [1]
    
    ; Wait for response
    set pindirs, 0      ; Set CMD as input
    set y, 31           ; Wait for response (32 cycles max)
    
wait_response:
    in pins, 1          ; Sample response bit  
    jmp pin response_found
    jmp y-- wait_response
    
response_found:
    set y, 31           ; Read response bits
    
response_loop:
    in pins, 1
    jmp y-- response_loop
    
    push block          ; Send response to CPU
    set pindirs, 1      ; Set CMD back to output

% c-sdk {
    static inline void sdio_cmd_program_init(PIO pio, uint sm, uint offset, uint cmd_pin, float freq) {
        pio_sm_config c = sdio_cmd_program_get_default_config(offset);
        
        // Configure CMD pin
        pio_gpio_init(pio, cmd_pin);
        sm_config_set_in_pins(&c, cmd_pin);
        sm_config_set_out_pins(&c, cmd_pin, 1);
        sm_config_set_jmp_pin(&c, cmd_pin);
        pio_sm_set_consecutive_pindirs(pio, sm, cmd_pin, 1, true);
        
        // Set shifts
        sm_config_set_in_shift(&c, false, false, 32);
        sm_config_set_out_shift(&c, false, false, 32);
        
        // Set frequency 
        float div = (float)clock_get_hz(clk_sys) / freq;
        sm_config_set_clkdiv(&c, div);
        
        // Initialize
        pio_sm_init(pio, sm, offset, &c);
    }
%}

; ====================================================================
; SDIO 4-bit Data Line Program
; ====================================================================
.program sdio_dat
.side_set 1 opt

public write_data:
    pull block          ; Get data word (32 bits)
    mov x, osr
    set y, 7            ; 8 nibbles (4 bits each)

write_nibble_loop:
    out pins, 4 side 1  ; Output 4 bits on rising edge
    jmp y-- write_nibble_loop side 0 [1]
    
    jmp write_data      ; Continue with next word

public read_data:
    set y, 7            ; 8 nibbles per word

read_nibble_loop:
    in pins, 4 side 1   ; Input 4 bits on rising edge  
    jmp y-- read_nibble_loop side 0 [1]
    
    push block          ; Send word to CPU
    jmp read_data       ; Continue reading

% c-sdk {
    static inline void sdio_dat_program_init(PIO pio, uint sm, uint offset, uint dat0_pin, float freq) {
        pio_sm_config c = sdio_dat_program_get_default_config(offset);
        
        // Configure 4-bit data pins (DAT0-DAT3)
        for (int i = 0; i < 4; i++) {
            pio_gpio_init(pio, dat0_pin + i);
        }
        
        sm_config_set_in_pins(&c, dat0_pin);
        sm_config_set_out_pins(&c, dat0_pin, 4);
        pio_sm_set_consecutive_pindirs(pio, sm, dat0_pin, 4, true);
        
        // Set shifts
        sm_config_set_in_shift(&c, false, true, 32);
        sm_config_set_out_shift(&c, false, true, 32);
        
        // Set frequency
        float div = (float)clock_get_hz(clk_sys) / freq;
        sm_config_set_clkdiv(&c, div);
        
        // Initialize  
        pio_sm_init(pio, sm, offset, &c);
    }
%}

; ====================================================================
; SDIO High-Speed Continuous Transfer Program
; For streaming data at maximum throughput
; ====================================================================
.program sdio_stream
.side_set 1 opt

public stream_start:
    pull block          ; Get transfer length
    mov x, osr

stream_loop:
    pull block side 1   ; Get data and output on clock high
    out pins, 4 side 0 [1]  ; Output 4 bits on clock low
    jmp x-- stream_loop
    
    irq 0               ; Signal completion

% c-sdk {
    static inline void sdio_stream_program_init(PIO pio, uint sm, uint offset, uint dat0_pin, uint clk_pin, float freq) {
        pio_sm_config c = sdio_stream_program_get_default_config(offset);
        
        // Configure pins
        for (int i = 0; i < 4; i++) {
            pio_gpio_init(pio, dat0_pin + i);
        }
        pio_gpio_init(pio, clk_pin);
        
        sm_config_set_out_pins(&c, dat0_pin, 4);
        sm_config_set_sideset_pins(&c, clk_pin);
        pio_sm_set_consecutive_pindirs(pio, sm, dat0_pin, 4, true);
        pio_sm_set_consecutive_pindirs(pio, sm, clk_pin, 1, true);
        
        // Configure for streaming
        sm_config_set_out_shift(&c, false, true, 32);
        sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
        
        // Set frequency
        float div = (float)clock_get_hz(clk_sys) / freq;
        sm_config_set_clkdiv(&c, div);
        
        // Initialize
        pio_sm_init(pio, sm, offset, &c);
    }
%}
